# name: Build and test

# on: push
  
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       db:
#         image: 'postgres:15.0-alpine'
#         ports: ['5432:5432']
#         env:
#           POSTGRES_PASSWORD: postgres
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - uses: actions/checkout@v2
#       - name: Setup elixir
#         uses: actions/setup-elixir@v1
#         with:
#           otp-version: '25'
#           elixir-version: '1.14.1'
#       - name: Install Dependencies
#         run: mix deps.get
#       - name: Run Tests
#         run: mix test


name: Build, test and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: eu-west-3
    - name: Login to AWS
      run: aws ecr get-login-password --region eu-west-3 | docker login --username AWS --password-stdin ${{ secrets.AWS_REPO_URI }}
    - name: Build back-end image
      run: docker build -t gotham-back:latest -t gotham-back:${{ github.GITHUB_SHA }} ./gotham/
    - name: Buid front-end image
      run: docker build -t gotham-front:latest -t gotham-front:${{ github.GITHUB_SHA }} ./gotham-front/
    - name: publish back-end image on Amazon ECR
      run: |
        docker push ${{ secrets.AWS_REPO_URI }}/gotham-back:latest
        docker push ${{ secrets.AWS_REPO_URI }}/gotham-back:${{ github.GITHUB_SHA }}
    - name: publish front-end image on Amazon ECR
      run: |
        docker push ${{ secrets.AWS_REPO_URI }}/gotham-front:latest
        docker push ${{ secrets.AWS_REPO_URI }}/gotham-front:${{ github.GITHUB_SHA }}

  test:
    name: test
    needs: build
    runs-on: ubuntu-latest
    services:
      db:
        image: 'postgres:15.0-alpine'
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.14.1' # Define the elixir version [required]
        otp-version: '25' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      working-directory: ./gotham
      run: mix deps.get
    - name: Run tests
      working-directory: ./gotham
      run: mix test

  deploy:
    name: deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ec2-user/MSC-Pool &&
            git fetch --all &&
            git reset --hard main &&
            git pull origin main &&
            docker-compose up -d --build 
          '