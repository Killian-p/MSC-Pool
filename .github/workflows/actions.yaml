# name: Build and test

# on: push
  
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       db:
#         image: 'postgres:15.0-alpine'
#         ports: ['5432:5432']
#         env:
#           POSTGRES_PASSWORD: postgres
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - uses: actions/checkout@v2
#       - name: Setup elixir
#         uses: actions/setup-elixir@v1
#         with:
#           otp-version: '25'
#           elixir-version: '1.14.1'
#       - name: Install Dependencies
#         run: mix deps.get
#       - name: Run Tests
#         run: mix test


name: Build, test and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    services:
      db:
        image: 'postgres:15.0-alpine'
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.14.1' # Define the elixir version [required]
        otp-version: '25' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      working-directory: ./gotham
      run: mix deps.get
    - name: Run tests
      working-directory: ./gotham
      run: mix test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build the docker_compose
      run: docker-compose up -d --build
    - name: Buid the application
      run: docker-compose exec -T front-end npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ec2-user/MSC-Pool &&
            git checkout main &&
            git fetch --all &&
            git reset --hard origin/master &&
            git pull origin master &&
            docker-compose -f docker-compose.prod.yml up -d --build 
          '